{"version":3,"file":"index.modern.js","sources":["../src/index.js"],"sourcesContent":["import axios from 'axios'\n\n\n\nconst _userReposListFormatHandler = async (ghRawResData = { data: [] }) => {\n  let _ghResData\n\n  let _list\n\n  try {\n   _ghResData = await ghRawResData.data\n\n   _list = await _ghResData\n           .map(repo => {\n             return {\n               name: repo.name,\n               url: repo.html_url,\n               description: repo.description,\n               stars: repo.stargazers_count\n             }\n           })\n           .sort((first, second) => second.stars - first.stars)\n\n   return _list\n  }\n  catch(err) {\n    console.error(err)\n    throw err\n  }\n}\n\nconst userGithubDataFetcher = async ({ name, page, per_page }) => {\n\n  let _url\n  let _ghData\n\n  try {\n    _url = await `https://api.github.com/users/${name}/repos?page=${page}&per_page=${per_page}&sort=updated`\n    _ghData = await axios.get(_url)\n\n    return {\n      ghRawResponseData: async () => await _ghData.data,\n      listRepos: async () => await _userReposListFormatHandler(_ghData)\n    }\n  }\n  catch(err) {\n    console.error(err)\n    throw err\n  }\n}\n\n\nconst listUserGithubRepos = async (usr = `DaneTheory`, opts = {\n  page: 1,\n  per_page: 30\n}) => {\n  let _usrRef\n  let _optsRef\n\n  let props\n  let _userRepos\n\n  let results\n\n  try {\n    _usrRef = await new String(usr)\n    _optsRef = await { ...opts }\n\n    props = {\n      name: _usrRef,\n        ..._optsRef\n    }\n\n   _userRepos = await userGithubDataFetcher({ ...props })\n                        .then((repositories) => {\n                          return repositories\n                        })\n                        .catch(err => {\n                          console.error(err)\n                          return err\n                        })\n\n   results = await _userRepos\n\n    if(results instanceof Error) {\n      throw results\n    }\n\n    return results\n  }\n  catch(err) {\n    console.error(err)\n    throw err\n  }\n}\n\n\n// class GithubInfo {\n//   constructor(searchTopic) {\n//     this._rawSearchTopic_ = searchTopic\n//\n//     this.searchTopic = null\n//     this.isScoped = null\n//\n//     // this.reqCtx = {\n//     //   apiBase: ghApiBaseUrl,\n//     //   queryParams: { ...ghApiQueryParams }\n//     // }\n//\n//     this.reqCtx = {\n//       apiBase: `https://api.github.com`,\n//       queryParams: {\n//         page: 1,\n//         per_page: 30\n//       }\n//     }\n//\n//     this.state = {\n//       topic: null,\n//       endpoint: null\n//     }\n//\n//     // this.get()\n//   }\n//\n//   // static ghApiBaseUrl = `https://api.github.com`\n//   static ghApiQueryParams = {\n//     page: 1,\n//     per_page: 30\n//   }\n//   static searchTopic = ``\n//\n//   static searchFilter(queryData) {\n//     if(typeof queryData !== `string`) {\n//       throw Error(`Expected typeof \"string\" be given as argument value. Recieved: ${usrOrOrg}`)\n//     }\n//\n//     return {\n//       isScoped: queryData.charAt(0) === `@` ? true : false,\n//       raw: queryData,\n//       formatted: queryData.toLowerCase()\n//     }\n//   }\n//\n//   static staticProp = `I am a static property!`\n//   static ghApiBaseUrl = `https://api.github.com`\n//   static staticMethod() {\n//     return 'static method has been called.'\n//   }\n//\n//\n//\n//\n//   getState() {\n//     let stateRef = this.state\n//     return stateRef\n//   }\n//\n//   setState(newState) {\n//     let currState = this.getState()\n//     let prevState = Object.freeze(currState)\n//\n//     let _state = {}\n//\n//     if(newState.topic !== prevState.topic) {\n//       _state.topic = newState.topic\n//     }\n//\n//     if(newState.endpoint !== prevState.endpoint) {\n//       _state.endpoint = newState.endpoint\n//     }\n//\n//     return this.state = Object.assign(prevState, {..._state})\n//   }\n//\n//   normalizeTopicHandler(_topic) {\n//     let normalizedTopic = null\n//\n//     if(normalizedTopic === null) {\n//       if(typeof _topic !== `string`) {\n//         throw Error(`Expects search topic be a valid string. Recieved: ${_topic}`)\n//       }\n//\n//       if(_topic.charAt(0) === `@`) {\n//         throw Error(`Expects search topic be a valid User. Scoped topics (i.e. valuez prefixed with \"@\") are not supported. Recieved: ${_topic}`)\n//       }\n//\n//       normalizedTopic = _topic.toLowerCase()\n//     }\n//\n//     this.setState({ topic: normalizedTopic })\n//   }\n//\n//\n//   normalizeEndpointHandler({ apiBase, queryParams }) {\n//     let currState = this.getState()\n//\n//     if(currState.topic === null || typeof currState.topic !== `string`) {\n//       let topicRef = this._rawSearchTopic_\n//       this.normalizeTopicHandler(topicRef)\n//     }\n//\n//     let _apiEndpointPartials = {\n//       basePath: apiBase,\n//       userRoute: `users/${currState.topic}`,\n//       reposRoute: `repos?page=${queryParams.page}&per_page=${queryParams.per_page}&sort=updated`\n//     }\n//\n//     let _resolvedEndpoint = `${_apiEndpointPartials.basePath}/${_apiEndpointPartials.userPath}/${_apiEndpointPartials.reposPath}`\n//\n//     this.setState({ endpoint: _resolvedEndpoint })\n//   }\n//\n//   resolveEndpointHandler({ topic, endpoint }) {\n//     let currState = { topic, endpoint }\n//     console.log(currState)\n//     // if(typeof currState !== `object`) {\n//     //   throw Error(`Expects \"state\" to be object as defined in constructor. Recieved: ${currState}`)\n//     // }\n//     //\n//     // if(currState.topic === null) {\n//     //   let topicRef = this._rawSearchTopic_\n//     //   this.normalizeTopicHandler(topicRef)\n//     // }\n//     //\n//     // if(currState.endpoint === null) {\n//     //   let ctxRef = this.reqCtx\n//     //   this.normalizeEndpointHandler(ctxRef)\n//     // }\n//     //\n//     // if(typeof currState.topic !== `string` && typeof currState.endpoint !== `string`) {\n//     //   throw Error(`Expects search topic and endpoint be resolved as valid string values. Recieved: ${currState}`)\n//     // }\n//   return currState\n//   }\n//\n//   getter () {\n//     console.log('GETTTER')\n//     let currState = this.getState()\n//\n//     if(currState.endpoint === null) {\n//       // console.log(currState)\n//       this.resolveEndpointHandler(currState)\n//       return this.getState()\n//     }\n//   }\n//\n//   set() {\n//     console.log('SETTTER')\n//     // let currState = this.getState()\n//     //\n//     // if(currState.endpoint === null) {\n//     //   this.resolveEndpointHandler()\n//     // }\n//   }\n// }\n\n//const me = new GithubInfo(`DaneTheory`)\n//const me = new GithubInfo(`DaneTheory`)\n// console.log(new GithubInfo('@DaneTheory'))\n//console.log(me.get)\n//console.log(GithubInfo.staticProp)\n// console.log(me.ghApiBaseUrl)\n//\n\n\n// listUserGithubRepos().then(data => {\n//   return data.listRepos().then(_l => {\n//     console.log(_l)\n//     return _l\n//   })\n//   .catch(err => {\n//     console.error(err)\n//     return err\n//   })\n// })\n// .catch(err => {\n//   console.error(err)\n//   return err\n// })\n\n//console.log(myGithubData)\n\n\n\nclass GithubInfo {\n\n  list: listUserGithubRepos\n}\n\n\n// const getRepos = async ({\n//   username = 'myogeshchavan97',\n//   page = 1,\n//   per_page = 30\n// } = {}) => {\n//   try {\n//     const repos = await axios.get(\n//       `https://api.github.com/users/${username}/repos?page=${page}&per_page=${per_page}&sort=updated`\n//     );\n//     return repos.data\n//       .map((repo) => {\n//         return {\n//           name: repo.name,\n//           url: repo.html_url,\n//           description: repo.description,\n//           stars: repo.stargazers_count\n//         };\n//       })\n//       .sort((first, second) => second.stars - first.stars);\n//   } catch (error) {\n//     return [];\n//   }\n// };\n\n// getRepos().then((repositories) => console.log(repositories));\n\n\nexport default GithubInfo\n"],"names":[],"mappings":"6BA6RA"}